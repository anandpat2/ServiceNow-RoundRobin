<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>task</collection>
        <condition>new x_8721_srr.RoundRobinTools().groupHasRoundRobin()</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="task">assignment_groupISNOTEMPTY^assigned_toISEMPTY^EQ<item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="assigned_to" goto="false" newquery="false" operator="ISEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Round Robin Assignment</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// TODO: Add condition to check property if round robin is turned on and assignment group rule RR rule is active
	// TODO: Create property for Rond Robin Debug
	
	var debug = gs.getProperty('x_8721_srr.logging.enabled');
	
	var users = [];
	var user_names = [];
	var sessions = [];
	var asgnmts = [];	
	if (debug == true) gs.info('Querying for assignment History');
	
	// Get sys_id and user_name of users for current group
	var tmp_u = [];
	var user = new GlideRecord('sys_user_grmember');
	user.addEncodedQuery('group='+current.assignment_group+'');
	user.query();
	if (debug == true) gs.info('Found '+user.getRowCount()+' users in group.');
	while(user.next()) {
		tmp_u = [];
		tmp_u.user_name = user.user.user_name+'';
		tmp_u.sys_id = user.user.sys_id+'';
		users.push(tmp_u);
	}
	// Extract user_names to array
	users.forEach(function(u) {
		user_names.push(u.user_name+'');
	});
	if (debug == true) gs.info('User names of users in group: '+user_names+'');
	
	// Check for logged in users
	var session = new GlideRecord('v_user_session');
	session.addEncodedQuery('userIN'+user_names);
	session.query();
    if (debug == true) gs.info('Found '+session.getRowCount()+' active sessions');
	while(session.next()) {
		if (sessions.indexOf(session.user+'') == -1) {
				sessions.push(session.user+'');
			}
	}
	
	// If logged in users exist
	if (sessions.length > 0) {
		
		// Get last assignments for users in group
		var asgnmt = new GlideRecord('x_8721_srr_assignment');
		var created_today = '^sys_created_onONToday@javascript:gs.daysAgoStart(0)@javascript:gs.daysAgoEnd(0)';
		asgnmt.addEncodedQuery('group='+current.assignment_group+'^user.user_nameIN'+sessions+created_today);
		asgnmt.orderByDesc('sys_created_on');
		asgnmt.query();
		if (debug == true) gs.info(asgnmt.getRowCount()+' assignments found.');
		while(asgnmt.next()) {
			if (asgnmts.map(function(i) { return i.sys_id; }).indexOf(asgnmt.user.sys_id+'') == -1) {
				asgnmts.push({sys_id:asgnmt.user.sys_id+'',user_name:asgnmt.user.user_name+''});
			}
		}
		if (debug == true) gs.info('Here are the asgnmt ids: '+asgnmts);
	}
	// If assignments length is same as session get last value and assign
	if (sessions.length ==  asgnmts.length) {
		assignUser(asgnmts[asgnmts.length-1].sys_id);
	}
	// If assignments length is not same as session assign to user missing from assignments
	else {
		sessions.some(function(u) {
			var index = asgnmts.map(function(item) { return item.user_name; }).indexOf(u);
			if (index == -1) {
				var u_obj = gs.getUser();
				assignUser(getUserById(u));
				return true;
			}
		});
    }
	
	function assignUser(sys_id) {
		current.assigned_to = sys_id;
		// Insert Record in Round Robin Assigned Table
		var gr = new GlideRecord('x_8721_srr_assignment');
		gr.initialize(); 
		gr.user = sys_id; 
		gr.group = current.assignment_group.sys_id+'';
		gr.task = current.sys_id+'';
		gr.insert();
	}
	
	function getUserById(user_name) {
		var gr = new GlideRecord('sys_user');
		gr.addEncodedQuery('user_name='+user_name);
		gr.query();
		if(gr.next()) {
			return gr.sys_id+'';
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-06-20 17:40:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2eff73b20fc0ae004a738d8ce1050e74</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>Round Robin Assignment</sys_name>
        <sys_overrides/>
        <sys_package display_value="Round Robin" source="x_8721_srr">176c97f60f40ae004a738d8ce1050eeb</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Round Robin">176c97f60f40ae004a738d8ce1050eeb</sys_scope>
        <sys_update_name>sys_script_2eff73b20fc0ae004a738d8ce1050e74</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-06-21 18:49:17</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2eff73b20fc0ae004a738d8ce1050e74"/>
</record_update>
